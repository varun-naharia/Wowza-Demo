//
//  IBLoginController.swift
//  WowzaDemo
//
//  Created by Varun Naharia on 30/08/17.
//  Copyright Â© 2017 Varun Naharia. All rights reserved.
//
//  This file was generated by the DVStarterProject Xcode Templates,
//  see http://technaharia.in
//  Credit: Dinesh Saini, Varun Naharia

import UIKit
import GameplayKit
import WowzaGoCoderSDK

class LoginController: BaseController, WZStatusCallback {

    @IBOutlet weak var broadcastButton:UIButton!
    var goCoder:WowzaGoCoder!
    
    override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.
        
        
        #if DEVELOPMENT
            print("Running in development mode")
            
        #else
            print("Running in release mode")
        #endif
//        didLoginUser()
        print(AppURL.BaseURL)
    
        // Register the GoCoder SDK license key
        
        let goCoderLicensingError: Error? = WowzaGoCoder.registerLicenseKey("GOSK-1D44-0103-66A8-9756-78D7")
        if goCoderLicensingError != nil {
            // Log license key registration failure
            print(goCoderLicensingError!.localizedDescription)
        }
        else {
            // Initialize the GoCoder SDK
            goCoder = WowzaGoCoder.sharedInstance()
        }
        
        
        if goCoder != nil {
            // Associate the U/I view with the SDK camera preview
//            goCoder.cameraView = view
            // Start the camera preview
//            goCoder.cameraPreview?.start()
        }
        
        // Get a copy of the active config
        
        let goCoderBroadcastConfig: WowzaConfig? = goCoder.config
        // Set the defaults for 720p video
        goCoderBroadcastConfig?.load(WZFrameSizePreset.preset1280x720)
        // Set the connection properties for the target Wowza Streaming Engine server or Wowza Cloud account
        goCoderBroadcastConfig?.hostAddress = "132.148.81.125"
        goCoderBroadcastConfig?.portNumber = 1935
        goCoderBroadcastConfig?.applicationName = "live"
        goCoderBroadcastConfig?.streamName = "myStream"
        goCoderBroadcastConfig?.username = "livetation"
        goCoderBroadcastConfig?.password = "Godaddytxj51"
        goCoderBroadcastConfig?.videoEnabled = false
        // Update the active config
        goCoder.config = goCoderBroadcastConfig!


    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func onWZStatus(_ goCoderStatus: WZStatus!) {
        var statusMessage: String? = nil
        switch goCoderStatus.state {
        case WZState.idle:
            statusMessage = "The broadcast is stopped"
        case WZState.starting:
            statusMessage = "Broadcast initialization"
        case WZState.running:
            statusMessage = "Streaming is active"
        case WZState.stopping:
            statusMessage = "Broadcast shutting down"
        case WZState.ready:
            statusMessage = "Broadcast ready"
        case WZState.buffering:
            statusMessage = "Broadcast buffering"
        }
        
        if statusMessage != nil {
            print("Broadcast status: \(statusMessage!)")
        }
    }
    
    func onWZError(_ goCoderStatus: WZStatus!) {
        // If an error is reported by the GoCoder SDK, display an alert dialog
        // containing the error details using the U/I thread
        DispatchQueue.main.async(execute: {() -> Void in
            let alertDialog = UIAlertView(title: "Streaming Error", message: goCoderStatus.description, delegate: nil, cancelButtonTitle: "OK", otherButtonTitles: "")
            alertDialog.show()
        })
    }
    
    func onWZEvent(_ status: WZStatus!) {
        
    }
    
    @IBAction func broadcastButtonTapped(_ button: UIButton) {
        // Ensure the minimum set of configuration settings have been specified necessary to
        // initiate a broadcast streaming session
        let configValidationError: Error? = goCoder.config.validateForBroadcast()
        if configValidationError != nil {
            let alertDialog = UIAlertView(title: "Incomplete Streaming Settings", message: goCoder.status.description, delegate: nil, cancelButtonTitle: "OK", otherButtonTitles: "")
            alertDialog.show()
        }
        else if goCoder.status.state != WZState.running {
            // Start streaming
            goCoder.startStreaming(self)
        }
        else {
            // Stop the broadcast that is currently running
            goCoder.endStreaming(self)
        }
        
    }
    
    
}


